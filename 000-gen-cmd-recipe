#!/usr/bin/env bash

CLUSTER_NAME=$(kubectl config get-contexts --no-headers | grep '*' | awk '{print $3}')
NAMESPACE_NAME="$1"

TEMPLATE_PATH="./Templates"
TEMPLATE_CLUSTER="__cluster__"
TEMPLATE_NAMESPACE="__namespace__"
TEMPLATE_VOLUME_PREFIX="__galera__"

function kubectlns() {
  #ctx=`kubectl config current-context`

  # verify that the namespace exists
  ns=`kubectl get namespace ${1} --no-headers --output=go-template={{.metadata.name}} 2>/dev/null`
  if [ -z "${ns}" ]; then
    echo "Namespace (${1}) not found. Please create one or check if the name is correct."
    exit -1
  fi
}

if [ $# -ne 2 ]; then
    echo "Usage: $0 namespace-name {default | local}"
    exit -1
else
    if [[ $2 != "default" && $2 != "local" ]]; then
        echo "Usage: $0 namespace-name {default | local}"
        echo "Use 'default' or 'local' option for storageClass"
        exit -1
    fi
fi

# Check if namespace exists
kubectlns $NAMESPACE_NAME

read -n 1 -s -r -p "Press any key to generate scripts and recipe for installing  Mariadb cluster in cluster ($CLUSTER_NAME), namespace ($NAMESPACE_NAME) or ^C to abort: "

echo "Setting cluster and namespace name in files ..."

declare -a FILES=($(ls Templates/))

echo "Processing (${#FILES[*]}) files."

for f in "${FILES[@]}"; do
    sed -e "s/$TEMPLATE_CLUSTER/$CLUSTER_NAME/g" "$TEMPLATE_PATH/$f" > $f
    sed -i "s/$TEMPLATE_NAMESPACE/$NAMESPACE_NAME/g" $f
    # Remove first 3 characters from NAMESPACE_NAME
    sed -i "s/$TEMPLATE_VOLUME_PREFIX/${NAMESPACE_NAME:3}/g" $f
    chmod +x $f
    echo "Done with $f..."
done

# insert new line for setting using hostpath volume
if [[ $2 == "local" ]]; then
    sed -i -e '/accessModes: /i\' -e '      storageClassName: "manual"' 01-galera-mariadb-ss.yaml
else
    rm -f 02-pv.yaml
fi
